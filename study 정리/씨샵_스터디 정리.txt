1. C# 교과서 마스터하기 01. C# 교과서 책 마스터하기 시작, C# 강의, C# 강좌, C# 동영상 강의
2. C# 강의 - C# 교과서 마스터하기 02. 준비사항
	- windwos 10
	- visual studio 2019 설치 (https://my.visualstudio.com/Downloads?q=visual%20studio%202019&wt.mc_id=o~msft~vscom~older-downloads)
	- .Net Core 3.1 SDK 설치  (https://dotnet.microsoft.com/en-us/download)
	- .Net SDK 를 가지고 빌드
	
	
	- .Net Core SDK 설치
		start https://dot.net
	- visual stuido code 설치
		start https://code.visualstudio.com
	- visual studio community 설치
		start https://www.visualstudio.com
		
	- Microsoft Store 에서 Windows Terminal 설치
		=> 화면 탭 사용 가능
	
	- dotnet new -l
		console 형 dotnet 프로젝트 생성 옵션 조회
	- dotnet new console -o HellowWorldConsole
		console 기반으로 HellowWorldConsole 프로젝트 생성
	- console 모드에서 F7 키 : 직전 사용한 console 명령 조회
	- dotnet run
		현재 디랙토리의 프로젝트를 빌드해서 실행
	- code . 
		현재 프로젝트를 VisualStudio Code로 Open 하여 편집해라
		
	- ctrl + ee  key : 특정 코드를 테스트하고 싶을때 사용 (C# Interactive) (c# 대화형)
	
3. C# 강의 - C# 교과서 마스터하기 03. Hello, World
	- https://try.dot.net/
		=> 웹에서 c# 코드를 테스트할 수 있는 사이트
	- 코드 조각
		cw + tab + tab 누르면 Console.WriteLine(); 코드 가 자동 입력된다.
	- c#9.0 부터는 class 와 main 메서드가 없어도 코드가 실행 될 수 있다.
	- dotnet new console
		=> 현재 디렉토리 이름으로 console 프로젝트 생성하는 명령
	- Visual Studio Code 에서 View -> Terminal 에서 콘솔 명령으로 입력 가능
	- Linux (ubuntu) 에서 사용 가능
		Visual Studio Code 로 개발가능
		Windows Form와 WPF 는 Windwos 환경에서만 사용 가능
	- https://learn.microsoft.com/ko-kr/dotnet/csharp/
	- 마이크로 소프트 언어 포털
		https://www.microsoft.com/ko-kr/language/Search?&searchTerm=method&langID=457&Source=true&productid=0
		=> 해당 언어를 공식 사용
	- 닷넷 api 브라우저
		https://learn.microsoft.com/en-us/dotnet/api/
		
		
		
40. 대리자 (Delegate)
	- delegate void Runner();
	  static void RunnerCall(Runner runner) => runner();  // 넘어온 메서드 실행 (runner 가 어떤 메서드 이던간에 파라미터 형식과 리턴 형식만 맞으면 넘긴 메서드를 그대로 실행한다.)
	  
	- Action 대리자: 반환값이 없는 메서드를 대신 호출합니다
	- Func 대리자: 매개변수와 반환값이 있는 메서드를 대신 호출합니다
		Func<매개변수형식, 반환값형식>
		Func<매개변수형식, 매개변수형식,.. ,반환값형식>
	- Predicate 대리자: T 매개변수에 대한 bool 값을 반환하는 메서드를 대신 호출합니다
	
	- Func<int> getNumber1 = delegate () { return 1234; };   => 무명 메서드()
	  Func<int> getNumber2 = () => 1234;   => 람다식
	
	- Func<int, int> anonymous = delegate (int x) { return x * x; }; //① 익명 메서드 담기
	  Func<int, double> lambda = x => x / (double)2;                 //② 람다 식 담기
	  => 익명 메서드 대신 람다식을 많이 사용한다.
	  
	  
	- static void StringLengthPrint(Func<string, int> stringlength, string message)
	  => 첫번째 파라미터에 int 형을 리턴하는 함수를 넘기기 가능
		Func<string, int> stringlength = data.Length;  와 같은 표현
	  => String 으로 파라미터를 받고, int 형으로 return 하는 함수를 파라미터로 넘겨라.
	  = > stringlength 은 int StringLength(string data) 함수의 alias 같은 것
		
		
		
	- static void Main() => StringLengthPrint(StringLength, "안녕하세요.");
		=> 결국 StringLengthPrint (int, string) 형태
		
	- 함수형 프로그래밍 (https://mangkyu.tistory.com/111)
		데이터를 변환하는 함수의 조합으로 구성되는 프로그램 작성 방법. 함수의 출력은 입력에 의해서만 정해지고, 함수를 실행하는 명령어를 내포한 구조로 연결하여 프로그램을 작성한다. (네이버)
		함수형 프로그램은 기본적으로 람다형 문법을 따르는 방식 (https://blog.naver.com/sr_it_/222435285856)
		함수 파라미터에 함수를 넘기는 방식
		객체의 빌더 패턴과 유사
			필요한 함수들을 조합해서 사용
			String result = words.stream()
                .filter(w -> w.length() > 1)
                .map(String::toUpperCase)
                .map(w -> w.substring(0, 1))
                .collect(Collectors.joining(" "));
		C#에서 함수형 프로그램밍의 정점은 LINQ
			=> 특정 데이터를 결과를 다음 함수에 넘겨 연결해서 처리할 수 있다. (메서드 체이닝)(파이프라인 개념과 유사)
			
			
41. 이벤트
	- 1. Delegate 선언 (이벤트 핸들러)
	  2. Delegate 로 된 event 선언
	  3. event에 이벤트 핸들러 메서드 할당
	  4. 이벤트 발생
	  
53. 테스트
	- MSTest /NUnit / xUnit
	- TestClass 특성 : Test 대상 Class
	- TestMethod 특성 : Test 대상 Method 라는 의미
			
54. NuGet 패키지
	- 닷넷  패키지 관리자
	- 라이브러리를 전 세계 개발자와 공유하기 위한 기능 (Add-On 추가 기능 같은..?)
	- NuGet 패키지 생성 : 프로젝트 속성 -> 패키지 -> 빌드시 NuGet 패키지 생성  옵션 체크하여 빌드 (*.nupkg 파일 생성됨)
	- NuGet 에 게시 : nuget.org 사이트 
	- NuGet 에서 라이브러리 가져오기 : 프로젝트 -> 종속성 -> nuGet 패키지에서 가져오기 패키지에 추가해서빌드해야 DLL이 다운로드된다.
	
	
	
[ C# WPF ] 	

1. C#, WPF HelloWorld(XAML기반)_WPF교육추천(WPF동영상/WPF강의/C#동영상/C#강의/C#교육/닷넷교육)
	- XAML 기반 MAIN START XAML 은 APP.XAML 에서 아래 설정으로 정의한다.
	StartupUri="MainWindow.xaml"> 
	
2. (닷넷C#, WPF기초강좌)C#코드 기반의 HelloWorld_WPF실무교육/자마린실무교육학원
	- 코드 기반 MAIN START XAML 은 CLASS 파일에서 STATREAD 의 MAIN 메서드를 정의하여 실행할 CLASS를 정의한다.
	        public static void Main(string[] args)
        {            
            [STAThread]
            MainWindow app = new MainWindow();
            app.Run();
        }
		
		=> C# 9.0 버전
		    var thread = new Thread(() =>
            {
                MainWindow app = new MainWindow();
                app.Run();
            });
            thread.SetApartmentState(ApartmentState.STA);
            thread.Start();
	- // C# 9 에서는 STAThread 특성 지원 안함 (참조 : https://www.sysnet.pe.kr/Default.aspx?mode=2&sub=0&pageno=8&detail=1&wid=12623_)

http://ojc.asia/bbs/board.php?bo_table=WPF&wr_id=3&sfl=wr_subject&stx=WPF%EA%B8%B0%EC%B4%88&sop=and




[ Visual Studio 팁 ]	

1. 상속받은 메서드 재정의를 위한 코드 자동 생성
	- override 또는 Visual Basic에서 Overrides 및 다음에 공백을 입력
	
https://learn.microsoft.com/ko-kr/visualstudio/ide/reference/generate-override?view=vs-2022	