[ Webjjang Spring ver.2023.03 ]

1. 과제 진행 상태 점검
2. 환경 설정
	- Spring Tool Suite 4
	- JDK : 1.8
	- Tomcat : 9.0.x
	- Maven : 3.8.x
	- 과제물 제출 : Github
	- 과제물 업로드 : GitHubDesktop
3. Git Commit comment에 진행항 강좌 이름 기재
    - init 업로드
    [ 진행 내용 ]
     Webjjang Spring ver.2023.03 01-01
     Webjjang Spring ver.2023.03 01-02 
     Webjjang Spring ver.2023.03 01-03


[ Spring 관련 사이트 ]
https://central.sonatype.com/   : Libray 다움을 위한 Maven  설정
https://projectlombok.org/
https://www.toptal.com/developers/gitignore   : ignore 설정 자동 생성
https://mybatis.org/mybatis-3/ko/getting-started.html : mybatis doc


1. Webjjang Spring ver.2023.03 01-05 개발 환경 구축 - Lombok 라이브러리 확인하기(웹짱과 함께하는 스프링)

Lombok         : 기본 생성자 + Getter + Setter + Tostring 를 기본적으로 만들어준다. (주로 도메인 객체(VO 객체)에 사용)
				날짜 형식 데이터를 받을 때 편하다. (캐스팅 신경쓰지 않아도 된다. Date 객체 사용 편함)
Log4j          : Logger 객체 생성 필요
Lombok + Log4j : Logger 객체 생성 선언 없이 Lombom 어노테이션으로 파일 로깅 가능


2. Webjjang Spring ver.2023.03 02-01 객체 생성과 DI 적용(웹짱과 함께하는 스프링)
Spring 자동 생성 어노테이션 => 설정이 되어야한다.  (
	url 이랑 연결이 필요한 경우 설정 : servlet-context.xml
	url 이랑 연결이 필요없는 경우 : root-context.xml
	- Controller	: URL 이 필요할 때 사용
	- Component : Spring 프레임워크의 구성
	- Service	
	- Repository : DAO 해당되는 속성, DB랑 연동 (메인 메모리가 아닌 저장소에 저장되어 있는 경우)
	- RestController : REST, AJAX 등	=> 데이터를 그대로 보낼때 사용
	- Advice			: 예외 처리
	
3. Webjjang Spring ver.2023.03 02-02 객체 생성과 JUnit으로 테스팅하기(웹짱과 함께하는 스프링)
@RunWith    : 지정된 Class를 같이 실행
@ContextConfiguration : web.xml 에 ContextConfiguration 처럼 지정된 설정 파일을 사용
@Test		: 테스트 대상 메서드


4. Webjjang Spring ver.2023.03 02-03 게시판 객체 생성과 DI 적용과 테스트(웹짱과 함께하는 스프링)
Spring 자동 생성 어노테이션 - @Controller, @Component, @Service, @Repository, @RestController, @Advice
BoardController - BoardServiceImpl - BoardDAO
DI 를 위해 Lombok 의 Setter 사용 (@Setter(onMethod_ = @Autowired))

5.
	Class A {
		@Setter(onMethod_ = @Autowired)
		B b;
	}
	=> 실행 중에 Spring 이 해당 B Class 로 된 객체를 생성하여 b 객체 변숭에 할당해준다. (Spring DI)
	
	
[4/	6]
6. Webjjang Spring ver.2023.03 03-01 오라클 JDBC 연결과 테스트(웹짱과 함께하는 스프링)	

*. Oracle XE 설치 시 롤백 오류 현상 발생시

 - 윈도우 사용자명이 한글이 아닌 영문으로 되어야함
   기존 한글 사용자이름으로 되어있을 경우 윈도우에 새 계정 추가해서 영문 계정으로 등록해야함
	Windows 로고키 + R키 -> netplwiz  -> 추가 -> 윈도우 재부팅 -> 추가된 계정으로 로그인 -> Oracle 설치
   관련 참조 : https://answers.microsoft.com/ko-kr/windows/forum/all/windows-10-%ec%97%90%ec%84%9c/ebb6ad55-e69c-45a2-a194-ab38d6fd69c3
 - PC 이름이 15자 이하의 영문자로 되어야함

    기타 설치 관련 참조 내용 https://velog.io/@ynjch97/Oracle-%EC%98%A4%EB%9D%BC%ED%81%B4-Database-11g-%EC%A0%91%EC%86%8D-%EC%98%A4%EB%A5%98-%EB%B0%8F-%EC%84%A4%EC%B9%98-%EC%82%AD%EC%A0%9C
                     https://forums.oracle.com/ords/apexds/post/can-t-install-oracle-database-xe-4205



*. tomcat 실행 시 오류 발생 
  Caused by: java.lang.IllegalArgumentException: 지정된 주요 리소스셋 [C:\jerajin_study\spring\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\ex00]은(는) 유효하지 않습니다.
  Mavent update 로 해결
  또는 workspace 가 다른 곳을 보고 있는지 확인
  
  
*. 12c 이후 사용자 생성
		https://hec-ker.tistory.com/97
  
  
7. Webjjang Spring ver.2023.03 03-02 DBCP 연결(웹짱과 함께하는 스프링)  
 - Connection Pool : Connection 연결 시간이 오래 걸리니 미리 만들어서 저장해놓자
 - HikariCP : JDBC Connection Pool Library
 
 pom.xml에 내용 추가 후 ctrl + shift + f 키를 누르면 자동 formmatting 된다 (eclipse 용)
 
 ~conext.xml 설정 
   property 태그는 객체 setter 로 데이터 설정하는 것 name : setter 명, value : 넘길 값
   
 - JDBC 객체 생성
	HikariCP Connection Pool 객체 생성 -> Connectio Pool 객체를 DataSource 객체에 넣어서 Datasource 객체를 만든다. 이후 Datasource 객체를 사용
	
	
	
8. Webjjang Spring ver.2023.03 03-03 DBCP 테스트(웹짱과 함께하는 스프링)
  - try (Connection con = dataSource.getConnection()){
     => <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">  
	 => 위 destroy-method 설정으로 인해 con 객체 종료 시 data close 처리 된다.
	 => try (객체 선언 생성) { ~~ } catch () {~~~}   => 객체 자동 닫기 
  -  Connection 하나당 Oracle 서버의 프로세스 한개 (1:1)
  -  개발자 개별로 Connection Pool 을 구성하여 사용 시 Oracle 서버의 Connection 프로세스가 1:1 생성된다
  -  Oracle 서버 Connection 프로세스 부족 시 Oracle에서 프로세스 생성 갯수 변경 필요
  
  
  
9. Webjjang Spring ver.2023.03 04-01 MyBatis 연결과 테스트(웹짱과 함께하는 스프링)  
  - MyBatis 사용 단게 
     : Spring JDBC
     : pring - MyBatis 연결
     : MyBatis  Lib 필요
	 
  
	 
  - pom.xml 의 dependency 설정
	groupid : package 명
	artifactId : jar 파일명
	
  - dependency 추가
	spring-tx			: 트랜잭션 처리 (commit, rollback)
	spring-jdbc			: DB 처리
	mybatis
	mybatis-spring		: MyBatis와 Spring 연결해주는 프로그램
	
	
  - DAO 를 만들지 않고 sqlSession 을 사용한다. 완전 자동화를 위하여...
  - sqlSession.insert, sqlSession.update, sqlSession.delete  등으로 해서 외부에 작성한 sql을 실행할 수 있다.

  
  
10. Webjjang Spring ver.2023.03 04-02 MyBatis의 Mapper 방식으로 SQL 처리하기(웹짱과 함께하는 스프링)  
	- 실행할 SQL 을 지정
		1. XML (mapper) 에 지정할 수 있다		: 복잡한 SQL 을 실행할때
		2. 어노테이션에 지정할 수 있다.  : 간단한 SQL 을 실행할때
		
	- <mybatis-spring:scan base-package="org.zerock"/>
		: org.zerock 하위 패키지를 모든 mybatis mapper 설정을 scan 하여사용한다.
	- <context:component-scan	base-package="org.zerock"/>
		: org.zerock 하위 패키지의 모든 spring 설정을 scan 하여 사용한다.
		
	- @Select  어노테이션 : 함수에서 간단한 SQL 을 사용할 경우 사용
	
	public class TimeMapperTest {
	
	@Setter(onMethod_ = @Autowired)
	private TimeMapper  timeMapper;
	=> Spring 에서 TimeMapper 인터페이스의 객체를 생성하여 timeMapper 에 할당한다.
	
	
	
11. Webjjang Spring ver.2023.03 04-03 MyBatis의 Mapper.xml을 사용하여 SQL 처리하기(웹짱과 함께하는 스프링)	
	- 이클립스에서 New -> Package 로 생성 시 package 명을 . 으로 구분하는 경우 계층별 폴더를 생성해준다.
	- resource 폴더에 mapper 를 위한 폴더 생성
	- Mapper XML 파일은 인터페이스와 동일한 이름으로 생성해야한다.
	- <!DOCTYPE 뒤에 나오는 tag 가 이후 작성 시 가장먼저 나오는 tag 이다.
	- Mapper XML 파일에 <select id="getTime2"> id 에 매칭되는 Method 가 인터페이스에 선언되어 있어야한다.
	- <mapper namespace="org.zerock.mapper.TimeMapper"> 의 namespace 와 맵핑할 인터페이스의 package 경로가 동일해야한다.
			package org.zerock.mapper;
	- Mapper XML과 인터페이스의 위치를 잘 잡아라
	- 인터페이스와 동일한 XML 을 만들어라
	- Namespace를 맞춰라.




12. Webjjang Spring ver.2023.03 04-04 BoardMapper.xml을 이용하여 게시판 리스트 데이터 가져오기(웹짱과 함께하는 스프링)
	- MyBatis 작업 과정
		: 인터페이스 생성
		: Mapper XML 생성 (resource 폴더에 생성)
		: VO class 생성
	- Mapper XML
		Select Tag의 resultType : Select 한 결과를 담을 객체 타입
CREATE USER JAVA_TEST IDENTIFIED BY JAVA_TEST
DEFAULT TABLESPACE USERS;

GRANT CONNECT, RESOURCE, DBA TO JAVA_TEST;
		
	- Date 는 Java.sql이 아닌 Java.util 사용해야한다.
	- SQL의 컬럼명과 VO CLASS의 컬럼명이 동일해야한다. (순서는 상관 없음)
	- <select id="list" resultType="org.zerock.board.vo.BoardVO">
	   : id => 실행할 BoardMapper 인터페이스의 method
	   
	   
13. Webjjang Spring ver.2023.03 04-05 MyBatis의 DB 처리 로그 찍기와 로그 줄이기(웹짱과 함께하는 스프링)	   
	- 사용된 sql을 로깅
		: log4jdbc-log4j2-jdbc4
	- WARNING 으로된것만 출력하기
	- 출력한것을 줄여서 출력하기
		log4j.xml 에서 수준 설정
	<logger name="jdbc.connection">		
		<level value="warn" />		
		=> name : log 상에 출력 조정해야할 대상
		   level  value = info, warn
		   
		   
14. Webjjang Spring ver.2023.03 05-01 Spring WebMVC 기본 구조(웹짱과 함께하는 스프링)		   
	- localhost/??? 로 실행하기 위해서 Server 의 tomcat 속성에서 overview -> port 에서 8080 -> 80으로 변경, Modules 에서 path 를 / 로 설정
	
	web.xml 
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	=> url 과 상관 없는 경우 참조해야할 설정
	
	
	
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	=> url 과 상관 있는 경우 설정
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	=> 모든 url 모두 잡아서 사용하겠다는 의미
	
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
	=> / url 로 들어오는 경우 실행해야할 method 정의
	
	/ex01/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml
	<context:component-scan base-package="org.zerock.controller" />
	=> org.zerock.controller 하위의 class 에 대한 객체는 자동 생성하겠다는 의미
	
	// 자동 생성 어노테이션 - @Coontroller, @Service, @Repository, @Component, @RestController, @ControllerAdvice
	// @Coontroller - servlet-context.xml 에 선언, 그 외 어노테이션 - root-context.xml에 선언
	@Coontroller : url 과 맵핑된 class 중에서 자동 생성되어야하는 class 의 경우
	@Service     : Biz Logic 같은 class 같이 자동생성해야하는 경우
	@Repository  : DAO와 같은 데이터 보관하는 class 같이 자동 생성해야하는 경우
	@Component   : 애매한 class 인데 자동생성되어야하는 경우
	@RestController : 데이터 그대로 보내는 class
	@ControllerAdvice : 예외 처리
	
	
	
	Lombok 을 사용하지 않을 경우
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	Lombok 을 사용하는 경우 로깅 객체  생성
	@Log4j
	
	
15. Webjjang Spring ver.2023.03 06-01 Controller와 URI 매핑(웹짱과 함께하는 스프링)	
	- 	Controller 의 method return 값
		String - redirect: 이 안붙으면 jsp로 forward 된다, redirect: 이 붙어 있으면 페이지 이동
		void - uri 가 jsp의 정보가 된다. 예) /sample/test -> /sample/test.jsp 를 자동 찾는다.


//	mapping은 class 위에, 메서드 위에 맵핑 시킬 수 있다.
//		class 위에 - uri 앞에단
//		메서드 위에 - 클래스 맵핑 + 메서드 맵핑 => 전체 uri에 해당이 된다.		


	- pom.xml
		dependency
		<scope>runtime</scope>
		=> 실행시에만 사용되도록 하는 설정. 개발시에도 사용하도록 하려면 주석 처리 필요
		
		
	- 	@RequestMapping : GET/POST 등 지정할 수 있다.
		@GetMapping : GET 방식만 받겠다.
		@PostMapping : POST 방식만 받겠다.
		
		
		
16. Webjjang Spring ver.2023.03 06-02 BoardController를 이용한 게시판 흐름 만들기 실습(웹짱과 함께하는 스프링)
	- 게시판 (7개의 url 필요하다) - 개발전에 케이스별 url이 정의 되어야한다.	 (항목, url, next url, 접근 db 테이블 정의... )
		1) 리스트
		/board/list.do
		2) 보기
		/board/view.do?no=10
		3-1) 쓰기 폼
		/board/write.do - get
		3-2) 쓰기 처리		
		/board/write.do - post (똑같이 사용하면 오류나므로 POST로 분리)
		4-1) 수정
		/board/update.do - get
		4-2) 수정 폼
		/board/update.do - post (똑같이 사용하면 오류나므로 POST로 분리)
		5) 삭제
		/board/delete.do - post (비밀번호가 포함되어 있기 때문에)
		
		
	- method return type String = URL 에 .do 를 사용하기 위해서 String 타입으로 진행
	
	
17. Webjjang Spring ver.2023.03 06-03 Controller에서 파라메터로 전달 데이터 받아내기(웹짱과 함께하는 스프링)	
	- controller : 로직에 의해서 view 로 흐름을 넘길것인지 DB 로 처리해야할 것인지 결정하여 넘기는 역할
	- 어디서 부터 데이터가 와야하는가를 DFD 로 정의
		게시판 리스트 
		-> 글보기 (파라미터 : no, inc)	/board/view.do
		-> Spring 의 DispatcherServlet
		-> BoardController  (파라미터 : no, inc)   view(long no, int inc)
		
		
	- public String view(long no, int inc) {
		http://localhost/board/view.do?no=1&inc=1
		=> method 의 파라미터 명과 url의 파라미터명이 일치해야한다.
	- 수정 폼 처리 시 spring이 파라미터를 vo 객체로 자동으로 생성해준다.
	
	
	
18. Webjjang Spring ver.2023.03 06-04 같은 이름의 데이터 여러 개를 받아내기(웹짱과 함께하는 스프링)
	- 같은 이름 여러개받을때 list나 배열로 받는다. (input tag에서 동일한 name으로 사용)
	- public String delete(@RequestParam("no") List<Long> bno) {
	  =>@RequestParam 는 요청하는 파라미터와 메서트가 받는 파라미터가 이름이 다를 경우에 변환해서 사용하기 위해 사용
    - public String delete(@RequestParam("no") List<Long> no) {  => List 로 받아야할 경우는 @RequestParam 를 사용해야 오류가 나지 않는다.
	
	
19. Webjjang Spring ver.2023.03 06-05 날짜 데이터를 Date 객체로 받아내기(웹짱과 함께하는 스프링)	
	- String -> Date 로 변환 어노테이션
	- @Controller	인경우 @InitBinder
	- @Data			인경우 @DateTimeFormat
	- jsp 의 tag name은 VO 객체의 이름과 맞춰야한다.
	- @DateTimeFormat 로 선언한 Date 타입에 대해 클라이언트에서 넘겨온 정보를 자동으로 변경해서 저장한다.
	
	
	
20. Webjjang Spring ver.2023.03 06-06 Spring 한글 처리와 파일 업로드 설정(웹짱과 함께하는 스프링)
	- web.xml에 filter 를 이용해서 모든 요청에 대해 지정된 utf-8 encoder 를 적용 
	- 파일 업로드
		lib 없이 하는 경우 : 서블릿으로 올라오는 바이트 정보를 처리해야해서 복잡함
		lib 사용 하는 경우 
	- lib 추가는 pom.xml에 commons-fileupload 추가
	- 파일에 대한 정보는 (임시 폴더 정의, 최대 파일 사이즈 등) web 서버 설정이 필요하며, servlet-context.xml, web.xml 에 설정을 해야한다.
	 	org.springframework.web.multipart.commons.CommonsMultipartResolver
		maxUploadSize : 전체 업로드 허용 용량  (Byte 단위)
		maxUploadSizePerFile : 파일당 허용 옹량 (Byte 단위)
		uploadTempDir : 입시 업로드 폴더 (전달되는 용량이 커지면 임시 파일을 사용해서 저장해 놓는다. 작으면 메인 메모리를 사용한다.)
		maxInMemorySize : 최대 메모리 사용 가능 사이즈 설정 (Byte 단위)
		
		
21. Webjjang Spring ver.2023.03 06-07 파일 업로드와 여러 개의 파일 업로드 처리하기(웹짱과 함께하는 스프링)
	- 	*.jsp <form action="write.do" method="post" enctype="multipart/form-data">
		: enctype => body 부분에 내용이 들어간다.
	- image 사용 시 주의점
		VO 객체를 2가지를 만들어야 한다.
				
		file 용 : files - byte 단위 파일을 가지고 있는 정보가 : Controller 에서 사용
		db 용 : title 
				fileNames - 넘어온 파일의 저장된 이름  (DB 에서 사용)
		
22. Webjjang Spring ver.2023.03 06-08 Spring 예외 처리(웹짱과 함께하는 스프링)
	- @ExceptionHandler : 예외 처리 핸들러 지정 어노테이션
		@ExceptionHandler(예외 대상 예외 class 명)
		@ExceptionHandler 는 예외 대상 class를 중복으로 잡을 수 없다.
	- 프로젝트 내에 예외대상 class 의 예외 발생 시 해당 핸들러가 실행된다.
	- error_page.jsp
		<h4>${exception.message }</h4>
		=> jstl 사용. 
		=> CommonExceptionAdvice.exception() 의 model.addAttribute("exception", e); 코드에서 사용된 "exception" 지정
		=> .message 는 get~ 을 붙여서 getMessage 로 참조한다.
	- <ul>  : unorderlist 순서가 없는 리스트
	- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"  %>
		=> jstl 태그 사용 : pom.xml 에 정의되어있기 때문에 사용할 수 있다.
	<c:forEach items="${exception.stackTrace }" var="stack">
		<li>${stack}</li>
	</c:forEach>
		=> exception 에서 stacktrace 결과 값을 stack 에 넣고 (var="stack")  출력 한다.
	- 404 에러 (처리해야할 페이지 Not Found)
		web.xml 에 설정 추가 (404 에러 예외를 발생 시키겟다는 설정) (NoHandlerFoundException.class 를 사용하기 위한 설정)
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
	- 	핸들러에 어노테이션 추가
		@ExceptionHandler(NoHandlerFoundException.class)
		@ResponseStatus(HttpStatus.NOT_FOUND)
		 => 404 로 응답할거다.
		 
		 
23. Webjjang Spring ver.2023.03 06-09 jsp 없는 경우 처리(웹짱과 함께하는 스프링)
	- jsp 파일을 찾지 못한 경우의 처리
		url 은 있으나 jsp 파일이 없는 경우의 처리
		 JSP 파일이 없는 경우 스프링의 404 처리가 되지 않는다. 그래서 여기서 처리하도록 정의해 준다.
	public String list() {
		log.info("게시판 리스트................................");
//		System.out.println(10/0);
		return "board/list1";  => 없는 jsp 파일
	}		
	- web.xml 에서 ctrl+space 눌렀을 때 원하는 tag 목록이 없는 경우에는 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app~  웹 모듈  버전이 낮아서 발생하는 것이므로 버전을 올려야한다.